import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from '../src/app.module';

describe('AppController (e2e)', () => {
    let app: INestApplication;

    beforeEach(async () => {
        const moduleFixture: TestingModule = await Test.createTestingModule({
            imports: [AppModule],
        }).compile();

        app = moduleFixture.createNestApplication();
        await app.init();
    });

    it('/v1/balance (GET)', async () => {
        const response = await request(app.getHttpServer())
            .get('/v1/balance?addresses=0x39a582bE8039a526Bdf4730e4D1E3E0fE1Bc811b,0x902c38F2bcddF95E7BCE50A14515B4B62F502Bf2,0xBcFE52fEF72A70AD09245e40AEAcCE4B1e851320,0x0560de6E5a452a00F58a90cb5501C18e77EB91B4')
            .expect(200);

        expect(response.body.addresses).toBeDefined();
        expect(response.body.totalBalance).toBeDefined();
        await app.close()
    }, 100000);

    it('should return 400 when too many addresses are passed', () => {
        const input = [
            '0x0000000000000000000000000000000000000000',
            '0x0000000000000000000000000000000000000001',
            '0x0000000000000000000000000000000000000002',
            '0x0000000000000000000000000000000000000003',
            '0x0000000000000000000000000000000000000004',
            '0x0000000000000000000000000000000000000005',
            '0x0000000000000000000000000000000000000006',
            '0x0000000000000000000000000000000000000007',
            '0x0000000000000000000000000000000000000008',
            '0x0000000000000000000000000000000000000009',
            '0x0000000000000000000000000000000000000010',
            '0x0000000000000000000000000000000000000011',
            '0x0000000000000000000000000000000000000012',
            '0x0000000000000000000000000000000000000013',
            '0x0000000000000000000000000000000000000014',
            '0x0000000000000000000000000000000000000015',
            '0x0000000000000000000000000000000000000016',
            '0x0000000000000000000000000000000000000017',
            '0x0000000000000000000000000000000000000018',
            '0x0000000000000000000000000000000000000019',
            '0x0000000000000000000000000000000000000020',
            '0x0000000000000000000000000000000000000021',
            '0x0000000000000000000000000000000000000022',
            '0x0000000000000000000000000000000000000023',
            '0x0000000000000000000000000000000000000024',
            '0x0000000000000000000000000000000000000025',
            '0x0000000000000000000000000000000000000026',
            '0x0000000000000000000000000000000000000027',
            '0x0000000000000000000000000000000000000028',
            '0x0000000000000000000000000000000000000029',
            '0x0000000000000000000000000000000000000030',
            '0x0000000000000000000000000000000000000031',
            '0x0000000000000000000000000000000000000032',
            '0x0000000000000000000000000000000000000033',
            '0x0000000000000000000000000000000000000034',
            '0x0000000000000000000000000000000000000035',
            '0x0000000000000000000000000000000000000036',
            '0x0000000000000000000000000000000000000037',
            '0x0000000000000000000000000000000000000038',
            '0x0000000000000000000000000000000000000039',
            '0x0000000000000000000000000000000000000040',
            '0x0000000000000000000000000000000000000041',
            '0x0000000000000000000000000000000000000042',
            '0x0000000000000000000000000000000000000043',
            '0x0000000000000000000000000000000000000044',
            '0x0000000000000000000000000000000000000045',
            '0x0000000000000000000000000000000000000046',
            '0x0000000000000000000000000000000000000047',
            '0x0000000000000000000000000000000000000048',
            '0x0000000000000000000000000000000000000049',
            '0x0000000000000000000000000000000000000050',
            '0x0000000000000000000000000000000000000051',
            '0x0000000000000000000000000000000000000052',
            '0x0000000000000000000000000000000000000053',
            '0x0000000000000000000000000000000000000054',
            '0x0000000000000000000000000000000000000055',
            '0x0000000000000000000000000000000000000056',
            '0x0000000000000000000000000000000000000057',
            '0x0000000000000000000000000000000000000058',
            '0x0000000000000000000000000000000000000059',
            '0x0000000000000000000000000000000000000060',
            '0x0000000000000000000000000000000000000061',
            '0x0000000000000000000000000000000000000062',
            '0x0000000000000000000000000000000000000063',
            '0x0000000000000000000000000000000000000064',
            '0x0000000000000000000000000000000000000065',
            '0x0000000000000000000000000000000000000066',
            '0x0000000000000000000000000000000000000067',
            '0x0000000000000000000000000000000000000068',
            '0x0000000000000000000000000000000000000069',
            '0x0000000000000000000000000000000000000070',
            '0x0000000000000000000000000000000000000071',
            '0x0000000000000000000000000000000000000072',
            '0x0000000000000000000000000000000000000073',
            '0x0000000000000000000000000000000000000074',
            '0x0000000000000000000000000000000000000075',
            '0x0000000000000000000000000000000000000076',
            '0x0000000000000000000000000000000000000077',
            '0x0000000000000000000000000000000000000078',
            '0x0000000000000000000000000000000000000079',
            '0x0000000000000000000000000000000000000080',
            '0x0000000000000000000000000000000000000081',
            '0x0000000000000000000000000000000000000082',
            '0x0000000000000000000000000000000000000083',
            '0x0000000000000000000000000000000000000084',
            '0x0000000000000000000000000000000000000085',
            '0x0000000000000000000000000000000000000086',
            '0x0000000000000000000000000000000000000087',
            '0x0000000000000000000000000000000000000088',
            '0x0000000000000000000000000000000000000089',
            '0x0000000000000000000000000000000000000090',
            '0x0000000000000000000000000000000000000091',
            '0x0000000000000000000000000000000000000092',
            '0x0000000000000000000000000000000000000093',
            '0x0000000000000000000000000000000000000094',
            '0x0000000000000000000000000000000000000095',
            '0x0000000000000000000000000000000000000096',
            '0x0000000000000000000000000000000000000097',
            '0x0000000000000000000000000000000000000098',
            '0x0000000000000000000000000000000000000099',
            '0x0000000000000000000000000000000000000100',
            '0x0000000000000000000000000000000000000101',
        ];

        return request(app.getHttpServer())
            .get('/v1/balance')
            .query({ addresses: input })
            .expect(400)
            .expect({
                statusCode: 400,
                message: 'Too many addresses',
                error: 'Bad Request',
            });
    });

    it('should return 400 when an invalid address is passed', () => {
        const input = [''];
        return request(app.getHttpServer())
            .get('/v1/balance')
            .query({ addresses: input })
            .expect(400)
            .expect({
                statusCode: 400,
                message: 'Invalid address',
                error: 'Bad Request'
            });
    });

    it('should return 400 when an invalid address is passed', () => {
        const input = ['0x000000000000000000000'];
        return request(app.getHttpServer())
            .get('/v1/balance')
            .query({ addresses: input })
            .expect(400)
            .expect({
                statusCode: 400,
                message: 'Invalid address',
                error: 'Bad Request'
            });
    });
});
